Jinx - Josiah Moltz, Nora Miller, Xinqing Lin
APCS pd6
HW63: Read/Review/Expand
2021-02-10
time spent: 2.3 hr + class time

DISCO
------------------------------------------------
*
================================================


QCC
------------------------------------------------
* Why were these directions so... ambiguous? Would have liked more direction on starRating
* How do we fill the positiveAdjectives.txt and negativeAdjectives.txt files (without doing it manually)?
  We thought about using the redirector commands in terminal but it still doesn't seem clear what to do
================================================

< Activity 1 > ----------------------------------------------------------------

1a) public static double sentimentVal( String word )
1b) The method requires a String parameter. If you try to pass a different type
    of parameter (like an int), there will be a compile-time error.
1c) The return type is a double.

2)
Method Call                   Return Value
sentimentVal("absent");       0.08
sentimentVal("flawed");       -1.56
sentimentVal("activity");     0.59

3a) Yes. The return type of sentimentVal is a double, which matches double num.
3b) No. sentimentVal's parameter type is String. It cannot pass an int.
3c) No. sentimentVal can only pass one String, as per its method signature.

< Activity 2 > ----------------------------------------------------------------

1-3) See Review.java

4) After the totalSentiment translated the review into a String and removed
punctuation, it iterates through every character. If the character is of the
alphabet, it adds the character to a temporary String, currentword. If the
character is a space, it finds and adds the sentimentVal to the totsentiment
variable and "restarts" currentword. It also finds the sentimentVal of
currentword after the iteration ends in case the String doesn't end with a space.

5a) The ratings do make sense. The rating for SimpleReview.txt was 2 whereas
the rating for TestReview.txt. TestReview.txt was very excited and happy
whereas SimpleReview.txt was very negative. SimpleReview.txt sounded more like
a 1 star, though.

5b)
  1) Adjust it so that certain punctuation (such as exclamation marks) amplify
the direction of the sentiment. Negative reviews become more negative and
positive reasons become more positive.
  2) Consider phrases instead of just words. Words on their own may have differing meaning,
but phrases are pretty consistent ways of determining positivity/negativity.


6) (a) The logical error is that the first conditional, totalSentiment < 15,
makes the rest of the else if statements useless. For example, if the totalSentiment
6, that means that it is < 15. This method will then return 4. However,
the student meant to make the method return 3.
   (b) One way he could fix it is reversing the order of the conditionals. instead
of starting with totalSentiment < 15, start with totalSentiment < 0. Another way
is to make more specific conditionals. For example, instead of totalSentiment < 15,
totalSentiment < 15 && totalSentiment >= 10.

< Activity 3 > ----------------------------------------------------------------

1) See positiveAdjectives.txt and negativeAdjectives.txt

2) See SimpleReview.txt

3) The indexOf method returns the index of the first occurrence of a String. One
way you can use this method to divide a String is by finding a divider and taking
the substring of the first half and the second half. The substring method returns
a String with a starting index of the first parameter and an ending index of the
last parameter. It is necessary to add 1 to the position of the space when
copying the remainder because the first parameter/starting index is inclusive.
Meaning, the space will be included in the returned String.

4) See Review.java

5) Non-static methods belong to each instance of the class, or object, and have
to be called through that object. Static methods belong to the class, so they can
be referenced directly

6) You can modify the fakeReview method to not get a randomAdjective, but a
randomPositiveAdj or a randomNegativeAdj to get an intentionally positive
or negative review.

< Activity 4 > ----------------------------------------------------------------

1) You may make an autogenerated negative review to over exaggerate an
experience and have a more interesting story to tell your friends

2) You may make an autogenerated positive review if you're a business owner
and want to attract more people to your business.

3) Instead of calling randomAdjective() to get a random adjective, it should
call randomNegativeAdj() to get a more negative adjective or randomPositiveAdj()
to get a more positive adjective.

4) See Review.java

5) The statement returns the original oneWord, excluding the first character.

6) It was necessary to remove the * when considering the sentimentVal because the
words in cleanSentiment.csv do not have punctuation. "*clean" is not the same
as "clean", so sentimentVal("*clean") will return 0 instead of -1.06.

7) A superPositiveAdjectives.txt file could be created with extremely positive words.
You can call this method in fakeReview to get an extremely positive review.

< Activity 5 > ----------------------------------------------------------------

1) We chose to implement this program because we wanted to create a fun, interesting,
and playable way to demonstrate our understanding of Strings.

2) We started with an empty main method. We decided to borrow a madlib from the
internet and stored it in an instance variable. Then, we created the fillIn method
using methods of the String class and iteration (a while loop). Once we were sure
that it worked, we added another madlib and gave the players a choice in which one
they wanted to fill in.

3) public static void fillIn (String story)
   We chose String story as our parameter because we wanted to give the players a choice
   on which madlib they wanted to fill out. The input would be either starter1 or starter2.
   The method is static because we want it to run in the main method (without instantiating)
   which is in static context.

4)  int askeriskI = madlib.indexOf("*");
    indexOf("*") returns the first index of an asterisk in the string madlib.

    madlib = madlib.substring(0, askeriskI) + newWord + madlib.substring(spaceI);
    madlib.substring(0, askeriskI) returns the substring of madlib from index 0 up to but not
    including askeriskI.

5)
  OUR CODE SEGMENT:
    if (choice == 1 || choice == 2) {
      if (choice == 1) {
        fillIn(starter1);
      }
      else {
        fillIn(starter2);
      }
    }
    else {
      System.out.println("Now that's not one of the options!");
    }

  One alternative way this code could have been written is to use an else-if statement
  for when choice == 2.

  ALTERNATIVE:
    if (choice == 1) {
      fillIn(starter1);
    }
    else if (choice == 2) {
      fillIn(starter2);
    }
    else {
      System.out.println("Now that's not one of the options!");
    }

6)
  while (madlib.indexOf("*") > -1) { //iteration
    int askeriskI = madlib.indexOf("*");
    int spaceI = madlib.indexOf(" ", askeriskI); //end index of to-be-deleted word
    System.out.println("Insert a " + madlib.substring(askeriskI + 1, spaceI));
    String newWord = "";
    newWord = s.nextLine();
    madlib = madlib.substring(0, askeriskI) + newWord + madlib.substring(spaceI);
  }

  The code above continues the body of code as long as there is an * in the string madlib.
  The body of code replaces the first instance of the * along with the subsequent word connected to it with the users choice.

  for (int i = 0; i < madlib.length()-1; i++) {
    if (madlib.substring(i,i+1).equals("*")) {
      int askeriskI = i;
      int spaceI = madlib.indexOf(" ", askeriskI); //end index of to-be-deleted word
      System.out.println("Insert a " + madlib.substring(askeriskI + 1, spaceI));
      String newWord = "";
      newWord = s.nextLine();
      madlib = madlib.substring(0, askeriskI) + newWord + madlib.substring(spaceI);
    }
  }
